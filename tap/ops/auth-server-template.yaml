#@ load("@ytt:data", "data")
---
apiVersion: sso.apps.tanzu.vmware.com/v1alpha1
kind: AuthServer
metadata:
  name: authserver-1
  namespace: #@ data.values.dev_namespace
  labels:
    name: authserver-1
  annotations:
    sso.apps.tanzu.vmware.com/allow-client-namespaces: #@ data.values.dev_namespace
    sso.apps.tanzu.vmware.com/allow-unsafe-issuer-uri: ""
    sso.apps.tanzu.vmware.com/allow-unsafe-identity-provider: ""
spec:
  replicas: 1
  issuerURI: #@ data.values.issuer_uri
  tokenSignature:
    signAndVerifyKeyRef:
      name: "authserver-1-signing-key"
  identityProviders:
    - name: "internal"
      internalUnsafe:
        users:
          - username: "admin"
            password: "admin"
            roles:
            - "customer"
            - "admin"
          - username: "user"
            password: "user"
            roles:
            - "customer"
    - name: "GitHub"
      openID:
        # REQUIRED
        # The issuer identifier. If the provider supports OpenID Connect Discovery,
        # this value will be used to auto-configure the provider, by obtaining information
        # at https://issuer-uri/.well-known/openid-configuration
        issuerURI: https://openid.example.com
        # Obtained when registering a client with the provider, often through a web UI
        clientID: my-client-abcdef
        # Obtained when registering a client with the provider, often through a web UI
        clientSecretRef:
          name: my-openid-client-secret
        # The URI for performing an authorization request and obtaining an authorization_code
        authorizationUri: https://example.com/oauth2/authorize
        # The URI for performing a token request, and obtaining a token
        tokenUri: https://example.com/oauth2/token
        # The JWKS endpoint for obtaining the JSON Web Keys, used to verify token signatures
        jwksUri: https://example.com/oauth2/jwks
        # Scopes used in the authorization request
        # MUST contain "openid". Other common OpenID values are "profile", "email".
        scopes:
          - "openid"
          - "other-scope"
        # OPTIONAL
        claimMappings:
          # The "my-oidc-provider-groups" claim from the ID token issued by "my-oidc-provider"
          # will be mapped into the "roles" claim in tokens issued by AppSSO
          roles: my-oidc-provider-groups
---
apiVersion: secretgen.k14s.io/v1alpha1
kind: RSAKey
metadata:
  name: authserver-1-signing-key
  namespace: #@ data.values.dev_namespace
spec:
  secretTemplate:
    type: Opaque
    stringData:
      key.pem: $(privateKey)
      pub.pem: $(publicKey)
---
apiVersion: v1
kind: Service
metadata:
  name: authserver-1
  namespace: #@ data.values.dev_namespace
spec:
  selector:
    app.kubernetes.io/part-of: authserver-1
    app.kubernetes.io/component: authorization-server
  ports:
    - port: 80
      targetPort: 8080
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: authserver-1
  namespace: #@ data.values.dev_namespace
spec:
  virtualhost:
    fqdn: #@ data.values.issuer_uri.replace("https://", "").replace("http://", "")
    #@ if/end hasattr(data.values, "tls_secret_name"):
    tls:
      secretName: #@ data.values.tls_secret_name
    corsPolicy:
      allowOrigin:
        - "*" # allows any origin
      allowMethods:
        - "*"
      allowHeaders:
        - '*'
  routes:
    - conditions:
        - prefix: /
      services:
        - name: authserver-1
          port: 80